// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(cuid())
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  email     String   @unique @map("email")
  password  String   @map("password")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  tokens AdminToken[]

  @@map("admins")
}

model AdminToken {
  id        String   @id @default(cuid())
  token     String   @unique @map("token")
  adminId   String   @map("admin_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  admin Admin @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@index([adminId])
  @@map("admin_tokens")
}

model Job {
  id                  String   @id @default(cuid())
  companyName         String   @map("company_name")
  companyDesc         String   @map("company_desc")
  companyWebsiteURL   String   @map("company_webiste_url")
  jobRole             String   @map("job_role")
  jobLocation         String   @map("job_location")
  selectionProcess    String   @map("selection_process")
  companyLogoURL      String   @map("company_logo_url")
  companyJdURL        String   @map("company_jd_url")
  companyPackage      Float    @map("company_package")
  dreamCompany        String   @map("dream_company")
  eligibleBranches    String[] @map("eligible_branches")
  cgpa                Float    @map("cgpa")
  automataScore       Float    @map("automata_score")
  elqScore            Float    @map("elq_score")
  percentage10th      Float    @map("percentage_10th")
  percentage12th      Float    @map("percentage_12th")
  percentageDiploma   Float    @map("percentage_diploma")
  activeBacklogs      Int      @map("active_backlogs")
  passiveBacklogs     Int      @map("passive_backlogs")
  applicationDeadline DateTime @map("application_deadline")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  applications Application[]

  @@map("jobs")
}

model Student {
  id                       String   @id @default(cuid())
  fullName                 String   @map("full_name")
  primaryEmail             String   @map("primary_email")
  alternateEmail           String   @map("alternate_email")
  primaryMobileNumber      String   @map("primary_mobile_number")
  alternateMobileNumber    String   @map("alternate_mobile_number")
  dateOfBirth              DateTime @map("date_of_birth")
  gender                   String   @map("gender")
  currentAddress           String   @map("current_address")
  permanentAddress         String   @map("permanent_address")
  city                     String   @map("city")
  state                    String   @map("state")
  branch                   String   @map("branch")
  division                 String   @map("division")
  rollNumber               Int      @map("roll_number")
  universityPRN            String   @map("university_prn")
  pictRegistrationId       String   @unique @map("pict_registration_id")
  percentage10th           Float    @map("percentage_10th")
  board10th                String   @map("board_10th")
  passingYear10th          Int      @map("passing_year_10th")
  noOfGapYearsAfter10th    Int      @map("no_of_gap_years_after_10th")
  reasonOfGapAfter10th     String   @map("reason_of_gap_after_10th")
  after10thAppearedFor     String   @map("after_10th_appeared_for")
  percentage12th           Float    @map("percentage_12th")
  board12th                String   @map("board_12th")
  passingYear12th          Int      @map("passing_year_12th")
  noOfGapYearsAfter12th    Int      @map("no_of_gap_years_after_12th")
  reasonOfGapAfter12th     String   @map("reason_of_gap_after_12th")
  percentageDiploma        Float    @map("percentage_diploma")
  universityOfDiploma      String   @map("university_of_diploma")
  passingYearDiploma       Int      @map("passing_year_diploma")
  noOfGapYearsAfterDiploma Int      @map("no_of_gap_years_after_diploma")
  reasonOfGapAfterDiploma  String   @map("reason_of_gap_after_diploma")
  percentileCet            Float    @map("percentile_cet")
  percentileJee            Float    @map("percentile_jee")
  collegeStartedYear       Int      @map("college_started_year")
  sgpaFeSem1               Float    @map("sgpa_fe_sem_1")
  sgpaFeSem2               Float    @map("sgpa_fe_sem_2")
  sgpaSeSem1               Float    @map("sgpa_se_sem_1")
  sgpaSeSem2               Float    @map("sgpa_se_sem_2")
  sgpaTeSem1               Float    @map("sgpa_te_sem_1")
  sgpaTeSem2               Float    @map("sgpa_te_sem_2")
  sgpaBeSem1               Float?   @default(-1) @map("sgpa_be_sem_1")
  sgpaBeSem2               Float?   @default(-1) @map("sgpa_be_sem_2")
  activeBacklogs           Int      @map("active_backlogs")
  activeBacklogSemesters   String[] @map("active_backlog_semesters")
  passiveBacklogs          Int      @map("passive_backlogs")
  yearDown                 String   @map("year_down")
  aadharNumber             String   @map("aadhar_number")
  panNumber                String   @map("pan_number")
  passportNumber           String   @map("passport_number")
  citizenship              String   @map("citizenship")
  documentsURL             String   @map("documents_url")
  amcatResultURL           String   @map("amcat_result_url")
  beReceiptURL             String   @map("be_receipt_url")
  password                 String   @map("password")
  isVerified               Boolean  @default(false) @map("is_verified")
  cgpa                     Int?     @default(-1) @map("cgpa")
  createdAt                DateTime @default(now()) @map("created_at")
  updatedAt                DateTime @updatedAt @map("updated_at")

  tokens       StudentToken[]
  applications Application[]

  @@map("students")
}

model StudentToken {
  id        String   @id @default(cuid())
  token     String   @unique @map("token")
  studentId String   @map("student_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([studentId])
  @@map("student_tokens")
}

model Application {
  id        String   @id @default(cuid())
  studentId String   @map("student_id")
  jobId     String   @map("job_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  job     Job     @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([studentId, jobId])
  @@index([studentId])
  @@index([jobId])
  @@map("applications")
}
